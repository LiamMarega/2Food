// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, avoid_bool_literals_in_conditional_expressions

// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the SupaDart configuration.

// SDK
import 'package:supabase_flutter/supabase_flutter.dart';

abstract class SupadartClass<T> {
  factory SupadartClass.fromJson() {
    throw UnimplementedError();
  }
  static Map<String, dynamic> insert(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  static Map<String, dynamic> update(Map<String, dynamic> data) {
    throw UnimplementedError();
  }
}

// Supabase Client Extension
extension SupadartClient on SupabaseClient {
  SupabaseQueryBuilder get promotions => from('promotions');
  SupabaseQueryBuilder get spatial_ref_sys => from('spatial_ref_sys');
  SupabaseQueryBuilder get menu_item_votes => from('menu_item_votes');
  SupabaseQueryBuilder get orders => from('orders');
  SupabaseQueryBuilder get restaurants => from('restaurants');
  SupabaseQueryBuilder get geometry_columns => from('geometry_columns');
  SupabaseQueryBuilder get advertisements => from('advertisements');
  SupabaseQueryBuilder get menu_items => from('menu_items');
  SupabaseQueryBuilder get restaurant_tags => from('restaurant_tags');
  SupabaseQueryBuilder get subscription_plans => from('subscription_plans');
  SupabaseQueryBuilder get user_rewards => from('user_rewards');
  SupabaseQueryBuilder get geography_columns => from('geography_columns');
  SupabaseQueryBuilder get reservations => from('reservations');
  SupabaseQueryBuilder get restaurant_analytics => from('restaurant_analytics');
  SupabaseQueryBuilder get rewards_redemptions => from('rewards_redemptions');
  SupabaseQueryBuilder get users => from('users');
}

// Supabase Storage Client Extension
extension SupadartStorageClient on SupabaseStorageClient {}

// Enums

// Utils
class Promotions implements SupadartClass<Promotions> {
  const Promotions({
    required this.id,
    required this.restaurantId,
    required this.title,
    required this.startTime,
    required this.endTime,
    this.description,
    this.discountType,
    this.maxUses,
  });
  factory Promotions.fromJson(Map<String, dynamic> jsonn) {
    return Promotions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      title: jsonn['title'] != null ? jsonn['title'].toString() : '',
      description:
          jsonn['description'] != null ? jsonn['description'].toString() : '',
      discountType: jsonn['discount_type'] != null
          ? jsonn['discount_type'].toString()
          : '',
      startTime: jsonn['start_time'] != null
          ? DateTime.parse(jsonn['start_time'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      endTime: jsonn['end_time'] != null
          ? DateTime.parse(jsonn['end_time'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      maxUses: jsonn['max_uses'] != null
          ? int.parse(jsonn['max_uses'].toString())
          : 0,
    );
  }
  final String id;
  final String restaurantId;
  final String title;
  final String? description;
  final String? discountType;
  final DateTime startTime;
  final DateTime endTime;
  final int? maxUses;

  static String get table_name => 'promotions';
  static String get c_id => 'id';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_title => 'title';
  static String get c_description => 'description';
  static String get c_discountType => 'discount_type';
  static String get c_startTime => 'start_time';
  static String get c_endTime => 'end_time';
  static String get c_maxUses => 'max_uses';

  static List<Promotions> converter(List<Map<String, dynamic>> data) {
    return data.map(Promotions.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? restaurantId,
    String? title,
    String? description,
    String? discountType,
    DateTime? startTime,
    DateTime? endTime,
    int? maxUses,
  }) {
    return {
      if (id != null) 'id': id,
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (discountType != null) 'discount_type': discountType,
      if (startTime != null) 'start_time': startTime.toUtc().toIso8601String(),
      if (endTime != null) 'end_time': endTime.toUtc().toIso8601String(),
      if (maxUses != null) 'max_uses': maxUses,
    };
  }

  static Map<String, dynamic> insert({
    required String restaurantId,
    required String title,
    required DateTime startTime,
    required DateTime endTime,
    String? id,
    String? description,
    String? discountType,
    int? maxUses,
  }) {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      title: title,
      description: description,
      discountType: discountType,
      startTime: startTime,
      endTime: endTime,
      maxUses: maxUses,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? restaurantId,
    String? title,
    String? description,
    String? discountType,
    DateTime? startTime,
    DateTime? endTime,
    int? maxUses,
  }) {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      title: title,
      description: description,
      discountType: discountType,
      startTime: startTime,
      endTime: endTime,
      maxUses: maxUses,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      title: title,
      description: description,
      discountType: discountType,
      startTime: startTime,
      endTime: endTime,
      maxUses: maxUses,
    );
  }
}

class SpatialRefSys implements SupadartClass<SpatialRefSys> {
  const SpatialRefSys({
    required this.srid,
    this.authName,
    this.authSrid,
    this.srtext,
    this.proj4text,
  });
  factory SpatialRefSys.fromJson(Map<String, dynamic> jsonn) {
    return SpatialRefSys(
      srid: jsonn['srid'] != null ? int.parse(jsonn['srid'].toString()) : 0,
      authName: jsonn['auth_name'] != null ? jsonn['auth_name'].toString() : '',
      authSrid: jsonn['auth_srid'] != null
          ? int.parse(jsonn['auth_srid'].toString())
          : 0,
      srtext: jsonn['srtext'] != null ? jsonn['srtext'].toString() : '',
      proj4text:
          jsonn['proj4text'] != null ? jsonn['proj4text'].toString() : '',
    );
  }
  final int srid;
  final String? authName;
  final int? authSrid;
  final String? srtext;
  final String? proj4text;

  static String get table_name => 'spatial_ref_sys';
  static String get c_srid => 'srid';
  static String get c_authName => 'auth_name';
  static String get c_authSrid => 'auth_srid';
  static String get c_srtext => 'srtext';
  static String get c_proj4text => 'proj4text';

  static List<SpatialRefSys> converter(List<Map<String, dynamic>> data) {
    return data.map(SpatialRefSys.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    int? srid,
    String? authName,
    int? authSrid,
    String? srtext,
    String? proj4text,
  }) {
    return {
      if (srid != null) 'srid': srid,
      if (authName != null) 'auth_name': authName,
      if (authSrid != null) 'auth_srid': authSrid,
      if (srtext != null) 'srtext': srtext,
      if (proj4text != null) 'proj4text': proj4text,
    };
  }

  static Map<String, dynamic> insert({
    int? srid,
    String? authName,
    int? authSrid,
    String? srtext,
    String? proj4text,
  }) {
    return _generateMap(
      srid: srid,
      authName: authName,
      authSrid: authSrid,
      srtext: srtext,
      proj4text: proj4text,
    );
  }

  static Map<String, dynamic> update({
    int? srid,
    String? authName,
    int? authSrid,
    String? srtext,
    String? proj4text,
  }) {
    return _generateMap(
      srid: srid,
      authName: authName,
      authSrid: authSrid,
      srtext: srtext,
      proj4text: proj4text,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      srid: srid,
      authName: authName,
      authSrid: authSrid,
      srtext: srtext,
      proj4text: proj4text,
    );
  }
}

class MenuItemVotes implements SupadartClass<MenuItemVotes> {
  const MenuItemVotes({
    required this.userId,
    required this.menuItemId,
    this.vote,
  });
  factory MenuItemVotes.fromJson(Map<String, dynamic> jsonn) {
    return MenuItemVotes(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      menuItemId:
          jsonn['menu_item_id'] != null ? jsonn['menu_item_id'].toString() : '',
      vote: jsonn['vote'] != null ? int.parse(jsonn['vote'].toString()) : 0,
    );
  }
  final String userId;
  final String menuItemId;
  final int? vote;

  static String get table_name => 'menu_item_votes';
  static String get c_userId => 'user_id';
  static String get c_menuItemId => 'menu_item_id';
  static String get c_vote => 'vote';

  static List<MenuItemVotes> converter(List<Map<String, dynamic>> data) {
    return data.map(MenuItemVotes.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? userId,
    String? menuItemId,
    int? vote,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (menuItemId != null) 'menu_item_id': menuItemId,
      if (vote != null) 'vote': vote,
    };
  }

  static Map<String, dynamic> insert({
    String? userId,
    String? menuItemId,
    int? vote,
  }) {
    return _generateMap(
      userId: userId,
      menuItemId: menuItemId,
      vote: vote,
    );
  }

  static Map<String, dynamic> update({
    String? userId,
    String? menuItemId,
    int? vote,
  }) {
    return _generateMap(
      userId: userId,
      menuItemId: menuItemId,
      vote: vote,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      menuItemId: menuItemId,
      vote: vote,
    );
  }
}

class Orders implements SupadartClass<Orders> {
  const Orders({
    required this.id,
    required this.userId,
    required this.restaurantId,
    required this.totalAmount,
    this.orderType,
    this.status,
    this.createdAt,
  });
  factory Orders.fromJson(Map<String, dynamic> jsonn) {
    return Orders(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      totalAmount: jsonn['total_amount'] != null
          ? num.parse(jsonn['total_amount'].toString())
          : 0,
      orderType:
          jsonn['order_type'] != null ? jsonn['order_type'].toString() : '',
      status: jsonn['status'] != null ? jsonn['status'].toString() : '',
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }
  final String id;
  final String userId;
  final String restaurantId;
  final num totalAmount;
  final String? orderType;
  final String? status;
  final DateTime? createdAt;

  static String get table_name => 'orders';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_totalAmount => 'total_amount';
  static String get c_orderType => 'order_type';
  static String get c_status => 'status';
  static String get c_createdAt => 'created_at';

  static List<Orders> converter(List<Map<String, dynamic>> data) {
    return data.map(Orders.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? restaurantId,
    num? totalAmount,
    String? orderType,
    String? status,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (totalAmount != null) 'total_amount': totalAmount.toString(),
      if (orderType != null) 'order_type': orderType,
      if (status != null) 'status': status,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    required String userId,
    required String restaurantId,
    required num totalAmount,
    String? id,
    String? orderType,
    String? status,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      totalAmount: totalAmount,
      orderType: orderType,
      status: status,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? restaurantId,
    num? totalAmount,
    String? orderType,
    String? status,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      totalAmount: totalAmount,
      orderType: orderType,
      status: status,
      createdAt: createdAt,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      totalAmount: totalAmount,
      orderType: orderType,
      status: status,
      createdAt: createdAt,
    );
  }
}

class Restaurants implements SupadartClass<Restaurants> {
  const Restaurants({
    required this.id,
    required this.ownerId,
    required this.name,
    required this.address,
    required this.recommended,
    required this.image,
    this.description,
    this.cuisineType,
    this.priceRange,
    this.dietaryTags,
    this.capacity,
    this.subscriptionPlan,
    this.isActive,
    this.createdAt,
  });
  factory Restaurants.fromJson(Map<String, dynamic> jsonn) {
    return Restaurants(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      ownerId: jsonn['owner_id'] != null ? jsonn['owner_id'].toString() : '',
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      description:
          jsonn['description'] != null ? jsonn['description'].toString() : '',
      address: jsonn['address'] != null ? jsonn['address'].toString() : '',
      cuisineType: jsonn['cuisine_type'] != null
          ? (jsonn['cuisine_type'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : <String>[],
      image: jsonn['image'] != null ? jsonn['image'].toString() : '',
      priceRange:
          jsonn['price_range'] != null ? jsonn['price_range'].toString() : '',
      dietaryTags: jsonn['dietary_tags'] != null
          ? (jsonn['dietary_tags'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : <String>[],
      capacity: jsonn['capacity'] != null
          ? int.parse(jsonn['capacity'].toString())
          : 0,
      subscriptionPlan: jsonn['subscription_plan'] != null
          ? jsonn['subscription_plan'].toString()
          : '',
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : false,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      recommended:
          jsonn['recommended'] != null ? jsonn['recommended'] as bool : false,
    );
  }
  final String id;
  final String ownerId;
  final String name;
  final String? description;
  final String address;
  final List<String>? cuisineType;
  final String? priceRange;
  final List<String>? dietaryTags;
  final int? capacity;
  final String? subscriptionPlan;
  final bool? isActive;
  final DateTime? createdAt;
  final bool recommended;
  final String image;

  static String get table_name => 'restaurants';
  static String get c_id => 'id';
  static String get c_ownerId => 'owner_id';
  static String get c_name => 'name';
  static String get c_description => 'description';
  static String get c_address => 'address';
  static String get c_cuisineType => 'cuisine_type';
  static String get c_priceRange => 'price_range';
  static String get c_dietaryTags => 'dietary_tags';
  static String get c_capacity => 'capacity';
  static String get c_subscriptionPlan => 'subscription_plan';
  static String get c_isActive => 'is_active';
  static String get c_createdAt => 'created_at';
  static String get c_recommended => 'recommended';
  static String get c_image => 'image';

  static List<Restaurants> converter(List<Map<String, dynamic>> data) {
    return data.map(Restaurants.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? ownerId,
    String? name,
    String? description,
    String? address,
    List<String>? cuisineType,
    String? priceRange,
    List<String>? dietaryTags,
    int? capacity,
    String? subscriptionPlan,
    bool? isActive,
    DateTime? createdAt,
    bool? recommended,
  }) {
    return {
      if (id != null) 'id': id,
      if (ownerId != null) 'owner_id': ownerId,
      if (name != null) 'name': name,
      if (description != null) 'description': description,
      if (address != null) 'address': address,
      if (cuisineType != null)
        'cuisine_type': cuisineType.map((e) => e).toList(),
      if (priceRange != null) 'price_range': priceRange,
      if (dietaryTags != null)
        'dietary_tags': dietaryTags.map((e) => e).toList(),
      if (capacity != null) 'capacity': capacity,
      if (subscriptionPlan != null) 'subscription_plan': subscriptionPlan,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (recommended != null) 'recommended': recommended,
    };
  }

  static Map<String, dynamic> insert({
    required String ownerId,
    required String name,
    required String address,
    required bool recommended,
    String? id,
    String? description,
    List<String>? cuisineType,
    String? priceRange,
    List<String>? dietaryTags,
    int? capacity,
    String? subscriptionPlan,
    bool? isActive,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      ownerId: ownerId,
      name: name,
      description: description,
      address: address,
      cuisineType: cuisineType,
      priceRange: priceRange,
      dietaryTags: dietaryTags,
      capacity: capacity,
      subscriptionPlan: subscriptionPlan,
      isActive: isActive,
      createdAt: createdAt,
      recommended: recommended,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? ownerId,
    String? name,
    String? description,
    String? address,
    List<String>? cuisineType,
    String? priceRange,
    List<String>? dietaryTags,
    int? capacity,
    String? subscriptionPlan,
    bool? isActive,
    DateTime? createdAt,
    bool? recommended,
  }) {
    return _generateMap(
      id: id,
      ownerId: ownerId,
      name: name,
      description: description,
      address: address,
      cuisineType: cuisineType,
      priceRange: priceRange,
      dietaryTags: dietaryTags,
      capacity: capacity,
      subscriptionPlan: subscriptionPlan,
      isActive: isActive,
      createdAt: createdAt,
      recommended: recommended,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      ownerId: ownerId,
      name: name,
      description: description,
      address: address,
      cuisineType: cuisineType,
      priceRange: priceRange,
      dietaryTags: dietaryTags,
      capacity: capacity,
      subscriptionPlan: subscriptionPlan,
      isActive: isActive,
      createdAt: createdAt,
      recommended: recommended,
    );
  }
}

class GeometryColumns implements SupadartClass<GeometryColumns> {
  const GeometryColumns({
    this.fTableCatalog,
    this.fTableSchema,
    this.fTableName,
    this.fGeometryColumn,
    this.coordDimension,
    this.srid,
    this.type,
  });
  factory GeometryColumns.fromJson(Map<String, dynamic> jsonn) {
    return GeometryColumns(
      fTableCatalog: jsonn['f_table_catalog']?.toString(),
      fTableSchema: jsonn['f_table_schema']?.toString(),
      fTableName: jsonn['f_table_name']?.toString(),
      fGeometryColumn: jsonn['f_geometry_column']?.toString(),
      coordDimension: jsonn['coord_dimension'] != null
          ? int.parse(jsonn['coord_dimension'].toString())
          : 0,
      srid: jsonn['srid'] != null ? int.parse(jsonn['srid'].toString()) : 0,
      type: jsonn['type']?.toString(),
    );
  }
  final String? fTableCatalog;
  final String? fTableSchema;
  final String? fTableName;
  final String? fGeometryColumn;
  final int? coordDimension;
  final int? srid;
  final String? type;

  static String get table_name => 'geometry_columns';
  static String get c_fTableCatalog => 'f_table_catalog';
  static String get c_fTableSchema => 'f_table_schema';
  static String get c_fTableName => 'f_table_name';
  static String get c_fGeometryColumn => 'f_geometry_column';
  static String get c_coordDimension => 'coord_dimension';
  static String get c_srid => 'srid';
  static String get c_type => 'type';

  static List<GeometryColumns> converter(List<Map<String, dynamic>> data) {
    return data.map(GeometryColumns.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? fTableCatalog,
    String? fTableSchema,
    String? fTableName,
    String? fGeometryColumn,
    int? coordDimension,
    int? srid,
    String? type,
  }) {
    return {
      if (fTableCatalog != null) 'f_table_catalog': fTableCatalog,
      if (fTableSchema != null) 'f_table_schema': fTableSchema,
      if (fTableName != null) 'f_table_name': fTableName,
      if (fGeometryColumn != null) 'f_geometry_column': fGeometryColumn,
      if (coordDimension != null) 'coord_dimension': coordDimension,
      if (srid != null) 'srid': srid,
      if (type != null) 'type': type,
    };
  }

  static Map<String, dynamic> insert({
    String? fTableCatalog,
    String? fTableSchema,
    String? fTableName,
    String? fGeometryColumn,
    int? coordDimension,
    int? srid,
    String? type,
  }) {
    return _generateMap(
      fTableCatalog: fTableCatalog,
      fTableSchema: fTableSchema,
      fTableName: fTableName,
      fGeometryColumn: fGeometryColumn,
      coordDimension: coordDimension,
      srid: srid,
      type: type,
    );
  }

  static Map<String, dynamic> update({
    String? fTableCatalog,
    String? fTableSchema,
    String? fTableName,
    String? fGeometryColumn,
    int? coordDimension,
    int? srid,
    String? type,
  }) {
    return _generateMap(
      fTableCatalog: fTableCatalog,
      fTableSchema: fTableSchema,
      fTableName: fTableName,
      fGeometryColumn: fGeometryColumn,
      coordDimension: coordDimension,
      srid: srid,
      type: type,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      fTableCatalog: fTableCatalog,
      fTableSchema: fTableSchema,
      fTableName: fTableName,
      fGeometryColumn: fGeometryColumn,
      coordDimension: coordDimension,
      srid: srid,
      type: type,
    );
  }
}

class Advertisements implements SupadartClass<Advertisements> {
  const Advertisements({
    required this.id,
    required this.restaurantId,
    required this.targetFilters,
    required this.budget,
    required this.startDate,
    required this.endDate,
  });
  factory Advertisements.fromJson(Map<String, dynamic> jsonn) {
    return Advertisements(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      targetFilters: jsonn['target_filters'] != null
          ? jsonn['target_filters'] as Map<String, dynamic>
          : <String, dynamic>{},
      budget:
          jsonn['budget'] != null ? num.parse(jsonn['budget'].toString()) : 0,
      startDate: jsonn['start_date'] != null
          ? DateTime.parse(jsonn['start_date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      endDate: jsonn['end_date'] != null
          ? DateTime.parse(jsonn['end_date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }
  final String id;
  final String restaurantId;
  final Map<String, dynamic> targetFilters;
  final num budget;
  final DateTime startDate;
  final DateTime endDate;

  static String get table_name => 'advertisements';
  static String get c_id => 'id';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_targetFilters => 'target_filters';
  static String get c_budget => 'budget';
  static String get c_startDate => 'start_date';
  static String get c_endDate => 'end_date';

  static List<Advertisements> converter(List<Map<String, dynamic>> data) {
    return data.map(Advertisements.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? restaurantId,
    Map<String, dynamic>? targetFilters,
    num? budget,
    DateTime? startDate,
    DateTime? endDate,
  }) {
    return {
      if (id != null) 'id': id,
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (targetFilters != null) 'target_filters': targetFilters,
      if (budget != null) 'budget': budget.toString(),
      if (startDate != null) 'start_date': startDate.toUtc().toIso8601String(),
      if (endDate != null) 'end_date': endDate.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    required String restaurantId,
    required Map<String, dynamic> targetFilters,
    required num budget,
    required DateTime startDate,
    required DateTime endDate,
    String? id,
  }) {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      targetFilters: targetFilters,
      budget: budget,
      startDate: startDate,
      endDate: endDate,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? restaurantId,
    Map<String, dynamic>? targetFilters,
    num? budget,
    DateTime? startDate,
    DateTime? endDate,
  }) {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      targetFilters: targetFilters,
      budget: budget,
      startDate: startDate,
      endDate: endDate,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      targetFilters: targetFilters,
      budget: budget,
      startDate: startDate,
      endDate: endDate,
    );
  }
}

class MenuItems implements SupadartClass<MenuItems> {
  const MenuItems({
    required this.id,
    required this.restaurantId,
    required this.name,
    required this.price,
    this.description,
    this.arContentUrl,
    this.isSignature,
    this.trendingScore,
    this.photo,
  });
  factory MenuItems.fromJson(Map<String, dynamic> jsonn) {
    return MenuItems(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      photo: jsonn['photo'] != null ? jsonn['photo'].toString() : '',
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      description:
          jsonn['description'] != null ? jsonn['description'].toString() : '',
      price: jsonn['price'] != null ? num.parse(jsonn['price'].toString()) : 0,
      arContentUrl: jsonn['ar_content_url'] != null
          ? jsonn['ar_content_url'].toString()
          : '',
      isSignature:
          jsonn['is_signature'] != null ? jsonn['is_signature'] as bool : false,
      trendingScore: jsonn['trending_score'] != null
          ? int.parse(jsonn['trending_score'].toString())
          : 0,
    );
  }
  final String id;
  final String restaurantId;
  final String name;
  final String? description;
  final num price;
  final String? arContentUrl;
  final bool? isSignature;
  final int? trendingScore;
  final String? photo;

  static String get table_name => 'menu_items';
  static String get c_id => 'id';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_name => 'name';
  static String get c_description => 'description';
  static String get c_price => 'price';
  static String get c_arContentUrl => 'ar_content_url';
  static String get c_isSignature => 'is_signature';
  static String get c_trendingScore => 'trending_score';
  static String get c_photo => 'photo';
  static List<MenuItems> converter(List<Map<String, dynamic>> data) {
    return data.map(MenuItems.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? restaurantId,
    String? name,
    String? description,
    num? price,
    String? arContentUrl,
    bool? isSignature,
    int? trendingScore,
  }) {
    return {
      if (id != null) 'id': id,
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (name != null) 'name': name,
      if (description != null) 'description': description,
      if (price != null) 'price': price.toString(),
      if (arContentUrl != null) 'ar_content_url': arContentUrl,
      if (isSignature != null) 'is_signature': isSignature,
      if (trendingScore != null) 'trending_score': trendingScore,
    };
  }

  static Map<String, dynamic> insert({
    required String restaurantId,
    required String name,
    required num price,
    String? id,
    String? description,
    String? arContentUrl,
    bool? isSignature,
    int? trendingScore,
  }) {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      name: name,
      description: description,
      price: price,
      arContentUrl: arContentUrl,
      isSignature: isSignature,
      trendingScore: trendingScore,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? restaurantId,
    String? name,
    String? description,
    num? price,
    String? arContentUrl,
    bool? isSignature,
    int? trendingScore,
  }) {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      name: name,
      description: description,
      price: price,
      arContentUrl: arContentUrl,
      isSignature: isSignature,
      trendingScore: trendingScore,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      restaurantId: restaurantId,
      name: name,
      description: description,
      price: price,
      arContentUrl: arContentUrl,
      isSignature: isSignature,
      trendingScore: trendingScore,
    );
  }
}

class RestaurantTags implements SupadartClass<RestaurantTags> {
  const RestaurantTags({
    required this.restaurantId,
    required this.tag,
  });
  factory RestaurantTags.fromJson(Map<String, dynamic> jsonn) {
    return RestaurantTags(
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      tag: jsonn['tag'] != null ? jsonn['tag'].toString() : '',
    );
  }
  final String restaurantId;
  final String tag;

  static String get table_name => 'restaurant_tags';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_tag => 'tag';

  static List<RestaurantTags> converter(List<Map<String, dynamic>> data) {
    return data.map(RestaurantTags.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? restaurantId,
    String? tag,
  }) {
    return {
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (tag != null) 'tag': tag,
    };
  }

  static Map<String, dynamic> insert({
    String? restaurantId,
    String? tag,
  }) {
    return _generateMap(
      restaurantId: restaurantId,
      tag: tag,
    );
  }

  static Map<String, dynamic> update({
    String? restaurantId,
    String? tag,
  }) {
    return _generateMap(
      restaurantId: restaurantId,
      tag: tag,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      restaurantId: restaurantId,
      tag: tag,
    );
  }
}

class SubscriptionPlans implements SupadartClass<SubscriptionPlans> {
  const SubscriptionPlans({
    required this.name,
    required this.priceMonthly,
    required this.features,
  });
  factory SubscriptionPlans.fromJson(Map<String, dynamic> jsonn) {
    return SubscriptionPlans(
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      priceMonthly: jsonn['price_monthly'] != null
          ? num.parse(jsonn['price_monthly'].toString())
          : 0,
      features: jsonn['features'] != null
          ? jsonn['features'] as Map<String, dynamic>
          : <String, dynamic>{},
    );
  }
  final String name;
  final num priceMonthly;
  final Map<String, dynamic> features;

  static String get table_name => 'subscription_plans';
  static String get c_name => 'name';
  static String get c_priceMonthly => 'price_monthly';
  static String get c_features => 'features';

  static List<SubscriptionPlans> converter(List<Map<String, dynamic>> data) {
    return data.map(SubscriptionPlans.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? name,
    num? priceMonthly,
    Map<String, dynamic>? features,
  }) {
    return {
      if (name != null) 'name': name,
      if (priceMonthly != null) 'price_monthly': priceMonthly.toString(),
      if (features != null) 'features': features,
    };
  }

  static Map<String, dynamic> insert({
    required num priceMonthly,
    required Map<String, dynamic> features,
    String? name,
  }) {
    return _generateMap(
      name: name,
      priceMonthly: priceMonthly,
      features: features,
    );
  }

  static Map<String, dynamic> update({
    String? name,
    num? priceMonthly,
    Map<String, dynamic>? features,
  }) {
    return _generateMap(
      name: name,
      priceMonthly: priceMonthly,
      features: features,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      name: name,
      priceMonthly: priceMonthly,
      features: features,
    );
  }
}

class UserRewards implements SupadartClass<UserRewards> {
  const UserRewards({
    required this.userId,
    this.points,
    this.lastActivity,
    this.photo,
  });
  factory UserRewards.fromJson(Map<String, dynamic> jsonn) {
    return UserRewards(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      points:
          jsonn['points'] != null ? int.parse(jsonn['points'].toString()) : 0,
      lastActivity: jsonn['last_activity'] != null
          ? DateTime.parse(jsonn['last_activity'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      photo: jsonn['photo'] != null ? jsonn['photo'].toString() : '',
    );
  }
  final String userId;
  final int? points;
  final DateTime? lastActivity;
  final String? photo;

  static String get table_name => 'user_rewards';
  static String get c_userId => 'user_id';
  static String get c_points => 'points';
  static String get c_lastActivity => 'last_activity';
  static String get c_photo => 'photo';

  static List<UserRewards> converter(List<Map<String, dynamic>> data) {
    return data.map(UserRewards.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? userId,
    int? points,
    DateTime? lastActivity,
    String? photo,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (points != null) 'points': points,
      if (lastActivity != null)
        'last_activity': lastActivity.toUtc().toIso8601String(),
      if (photo != null) 'photo': photo,
    };
  }

  static Map<String, dynamic> insert({
    String? userId,
    int? points,
    DateTime? lastActivity,
    String? photo,
  }) {
    return _generateMap(
      userId: userId,
      points: points,
      lastActivity: lastActivity,
      photo: photo,
    );
  }

  static Map<String, dynamic> update({
    String? userId,
    int? points,
    DateTime? lastActivity,
    String? photo,
  }) {
    return _generateMap(
      userId: userId,
      points: points,
      lastActivity: lastActivity,
      photo: photo,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      points: points,
      lastActivity: lastActivity,
      photo: photo,
    );
  }
}

class GeographyColumns implements SupadartClass<GeographyColumns> {
  const GeographyColumns({
    this.fTableCatalog,
    this.fTableSchema,
    this.fTableName,
    this.fGeographyColumn,
    this.coordDimension,
    this.srid,
    this.type,
  });
  factory GeographyColumns.fromJson(Map<String, dynamic> jsonn) {
    return GeographyColumns(
      fTableCatalog: jsonn['f_table_catalog']?.toString(),
      fTableSchema: jsonn['f_table_schema']?.toString(),
      fTableName: jsonn['f_table_name']?.toString(),
      fGeographyColumn: jsonn['f_geography_column']?.toString(),
      coordDimension: jsonn['coord_dimension'] != null
          ? int.parse(jsonn['coord_dimension'].toString())
          : 0,
      srid: jsonn['srid'] != null ? int.parse(jsonn['srid'].toString()) : 0,
      type: jsonn['type']?.toString(),
    );
  }
  final String? fTableCatalog;
  final String? fTableSchema;
  final String? fTableName;
  final String? fGeographyColumn;
  final int? coordDimension;
  final int? srid;
  final String? type;

  static String get table_name => 'geography_columns';
  static String get c_fTableCatalog => 'f_table_catalog';
  static String get c_fTableSchema => 'f_table_schema';
  static String get c_fTableName => 'f_table_name';
  static String get c_fGeographyColumn => 'f_geography_column';
  static String get c_coordDimension => 'coord_dimension';
  static String get c_srid => 'srid';
  static String get c_type => 'type';

  static List<GeographyColumns> converter(List<Map<String, dynamic>> data) {
    return data.map(GeographyColumns.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? fTableCatalog,
    String? fTableSchema,
    String? fTableName,
    String? fGeographyColumn,
    int? coordDimension,
    int? srid,
    String? type,
  }) {
    return {
      if (fTableCatalog != null) 'f_table_catalog': fTableCatalog,
      if (fTableSchema != null) 'f_table_schema': fTableSchema,
      if (fTableName != null) 'f_table_name': fTableName,
      if (fGeographyColumn != null) 'f_geography_column': fGeographyColumn,
      if (coordDimension != null) 'coord_dimension': coordDimension,
      if (srid != null) 'srid': srid,
      if (type != null) 'type': type,
    };
  }

  static Map<String, dynamic> insert({
    String? fTableCatalog,
    String? fTableSchema,
    String? fTableName,
    String? fGeographyColumn,
    int? coordDimension,
    int? srid,
    String? type,
  }) {
    return _generateMap(
      fTableCatalog: fTableCatalog,
      fTableSchema: fTableSchema,
      fTableName: fTableName,
      fGeographyColumn: fGeographyColumn,
      coordDimension: coordDimension,
      srid: srid,
      type: type,
    );
  }

  static Map<String, dynamic> update({
    String? fTableCatalog,
    String? fTableSchema,
    String? fTableName,
    String? fGeographyColumn,
    int? coordDimension,
    int? srid,
    String? type,
  }) {
    return _generateMap(
      fTableCatalog: fTableCatalog,
      fTableSchema: fTableSchema,
      fTableName: fTableName,
      fGeographyColumn: fGeographyColumn,
      coordDimension: coordDimension,
      srid: srid,
      type: type,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      fTableCatalog: fTableCatalog,
      fTableSchema: fTableSchema,
      fTableName: fTableName,
      fGeographyColumn: fGeographyColumn,
      coordDimension: coordDimension,
      srid: srid,
      type: type,
    );
  }
}

class Reservations implements SupadartClass<Reservations> {
  const Reservations({
    required this.id,
    required this.userId,
    required this.restaurantId,
    required this.partySize,
    required this.reservationTime,
    this.status,
    this.socialDonation,
  });
  factory Reservations.fromJson(Map<String, dynamic> jsonn) {
    return Reservations(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      partySize: jsonn['party_size'] != null
          ? int.parse(jsonn['party_size'].toString())
          : 0,
      reservationTime: jsonn['reservation_time'] != null
          ? DateTime.parse(jsonn['reservation_time'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      status: jsonn['status'] != null ? jsonn['status'].toString() : '',
      socialDonation: jsonn['social_donation'] == null
          ? false
          : jsonn['social_donation'] as bool,
    );
  }
  final String id;
  final String userId;
  final String restaurantId;
  final int partySize;
  final DateTime reservationTime;
  final String? status;
  final bool? socialDonation;

  static String get table_name => 'reservations';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_partySize => 'party_size';
  static String get c_reservationTime => 'reservation_time';
  static String get c_status => 'status';
  static String get c_socialDonation => 'social_donation';

  static List<Reservations> converter(List<Map<String, dynamic>> data) {
    return data.map(Reservations.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? restaurantId,
    int? partySize,
    DateTime? reservationTime,
    String? status,
    bool? socialDonation,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (partySize != null) 'party_size': partySize,
      if (reservationTime != null)
        'reservation_time': reservationTime.toUtc().toIso8601String(),
      if (status != null) 'status': status,
      if (socialDonation != null) 'social_donation': socialDonation,
    };
  }

  static Map<String, dynamic> insert({
    required String userId,
    required String restaurantId,
    required int partySize,
    required DateTime reservationTime,
    String? id,
    String? status,
    bool? socialDonation,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      partySize: partySize,
      reservationTime: reservationTime,
      status: status,
      socialDonation: socialDonation,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? restaurantId,
    int? partySize,
    DateTime? reservationTime,
    String? status,
    bool? socialDonation,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      partySize: partySize,
      reservationTime: reservationTime,
      status: status,
      socialDonation: socialDonation,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      partySize: partySize,
      reservationTime: reservationTime,
      status: status,
      socialDonation: socialDonation,
    );
  }
}

class RestaurantAnalytics implements SupadartClass<RestaurantAnalytics> {
  const RestaurantAnalytics({
    required this.restaurantId,
    this.monthlyClicks,
    this.conversions,
    this.popularDishes,
    this.customerDemographics,
  });
  factory RestaurantAnalytics.fromJson(Map<String, dynamic> jsonn) {
    return RestaurantAnalytics(
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      monthlyClicks: jsonn['monthly_clicks'] != null
          ? int.parse(jsonn['monthly_clicks'].toString())
          : 0,
      conversions: jsonn['conversions'] != null
          ? int.parse(jsonn['conversions'].toString())
          : 0,
      popularDishes: jsonn['popular_dishes'] != null
          ? (jsonn['popular_dishes'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : <String>[],
      customerDemographics: jsonn['customer_demographics'] != null
          ? jsonn['customer_demographics'] as Map<String, dynamic>
          : <String, dynamic>{},
    );
  }
  final String restaurantId;
  final int? monthlyClicks;
  final int? conversions;
  final List<String>? popularDishes;
  final Map<String, dynamic>? customerDemographics;

  static String get table_name => 'restaurant_analytics';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_monthlyClicks => 'monthly_clicks';
  static String get c_conversions => 'conversions';
  static String get c_popularDishes => 'popular_dishes';
  static String get c_customerDemographics => 'customer_demographics';

  static List<RestaurantAnalytics> converter(List<Map<String, dynamic>> data) {
    return data.map(RestaurantAnalytics.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? restaurantId,
    int? monthlyClicks,
    int? conversions,
    List<String>? popularDishes,
    Map<String, dynamic>? customerDemographics,
  }) {
    return {
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (monthlyClicks != null) 'monthly_clicks': monthlyClicks,
      if (conversions != null) 'conversions': conversions,
      if (popularDishes != null)
        'popular_dishes': popularDishes.map((e) => e).toList(),
      if (customerDemographics != null)
        'customer_demographics': customerDemographics,
    };
  }

  static Map<String, dynamic> insert({
    String? restaurantId,
    int? monthlyClicks,
    int? conversions,
    List<String>? popularDishes,
    Map<String, dynamic>? customerDemographics,
  }) {
    return _generateMap(
      restaurantId: restaurantId,
      monthlyClicks: monthlyClicks,
      conversions: conversions,
      popularDishes: popularDishes,
      customerDemographics: customerDemographics,
    );
  }

  static Map<String, dynamic> update({
    String? restaurantId,
    int? monthlyClicks,
    int? conversions,
    List<String>? popularDishes,
    Map<String, dynamic>? customerDemographics,
  }) {
    return _generateMap(
      restaurantId: restaurantId,
      monthlyClicks: monthlyClicks,
      conversions: conversions,
      popularDishes: popularDishes,
      customerDemographics: customerDemographics,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      restaurantId: restaurantId,
      monthlyClicks: monthlyClicks,
      conversions: conversions,
      popularDishes: popularDishes,
      customerDemographics: customerDemographics,
    );
  }
}

class RewardsRedemptions implements SupadartClass<RewardsRedemptions> {
  const RewardsRedemptions({
    required this.id,
    required this.userId,
    required this.restaurantId,
    required this.rewardType,
    this.redeemedAt,
  });
  factory RewardsRedemptions.fromJson(Map<String, dynamic> jsonn) {
    return RewardsRedemptions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      restaurantId: jsonn['restaurant_id'] != null
          ? jsonn['restaurant_id'].toString()
          : '',
      rewardType:
          jsonn['reward_type'] != null ? jsonn['reward_type'].toString() : '',
      redeemedAt: jsonn['redeemed_at'] != null
          ? DateTime.parse(jsonn['redeemed_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }
  final String id;
  final String userId;
  final String restaurantId;
  final String rewardType;
  final DateTime? redeemedAt;

  static String get table_name => 'rewards_redemptions';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_restaurantId => 'restaurant_id';
  static String get c_rewardType => 'reward_type';
  static String get c_redeemedAt => 'redeemed_at';

  static List<RewardsRedemptions> converter(List<Map<String, dynamic>> data) {
    return data.map(RewardsRedemptions.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? restaurantId,
    String? rewardType,
    DateTime? redeemedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (restaurantId != null) 'restaurant_id': restaurantId,
      if (rewardType != null) 'reward_type': rewardType,
      if (redeemedAt != null)
        'redeemed_at': redeemedAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    required String userId,
    required String restaurantId,
    required String rewardType,
    String? id,
    DateTime? redeemedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      rewardType: rewardType,
      redeemedAt: redeemedAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? restaurantId,
    String? rewardType,
    DateTime? redeemedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      rewardType: rewardType,
      redeemedAt: redeemedAt,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      restaurantId: restaurantId,
      rewardType: rewardType,
      redeemedAt: redeemedAt,
    );
  }
}

class Users implements SupadartClass<Users> {
  const Users({
    required this.id,
    required this.email,
    required this.role,
    this.createdAt,
    this.photo,
  });
  factory Users.fromJson(Map<String, dynamic> jsonn) {
    return Users(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      email: jsonn['email'] != null ? jsonn['email'].toString() : '',
      role: jsonn['role'] != null ? jsonn['role'].toString() : '',
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      photo: jsonn['photo'] != null ? jsonn['photo'].toString() : '',
    );
  }
  final String id;
  final String email;
  final String role;
  final DateTime? createdAt;
  final String? photo;

  static String get table_name => 'users';
  static String get c_id => 'id';
  static String get c_email => 'email';
  static String get c_role => 'role';
  static String get c_createdAt => 'created_at';
  static String get c_photo => 'photo';

  static List<Users> converter(List<Map<String, dynamic>> data) {
    return data.map(Users.fromJson).toList();
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? email,
    String? role,
    DateTime? createdAt,
    String? photo,
  }) {
    return {
      if (id != null) 'id': id,
      if (email != null) 'email': email,
      if (role != null) 'role': role,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (photo != null) 'photo': photo,
    };
  }

  static Map<String, dynamic> insert({
    required String email,
    required String role,
    String? id,
    DateTime? createdAt,
    String? photo,
  }) {
    return _generateMap(
      id: id,
      email: email,
      role: role,
      createdAt: createdAt,
      photo: photo,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? email,
    String? role,
    DateTime? createdAt,
    String? photo,
  }) {
    return _generateMap(
      id: id,
      email: email,
      role: role,
      createdAt: createdAt,
      photo: photo,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      email: email,
      role: role,
      createdAt: createdAt,
      photo: photo,
    );
  }
}
